{"version":3,"sources":["Nav.js","Inputs.js","Fact.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","id","name","onClick","activeTab","Inputs","type","onKeyUp","enterPress","onChange","numberChange","value","number","required","getFact","getRandomFact","monthChange","month","dayChange","day","getDateFact","Fact","fact","App","changeTab","e","setState","target","key","state","alert","fetch","then","response","json","text","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1dc0594.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Nav(props) {\r\n\treturn (\r\n\t<div className=\"nav\"> \r\n      <ul>\r\n        <li><button id=\"trivia\" name=\"nav-btn\" onClick ={props.onClick} className={(props.activeTab === 'trivia')?'active':'nactive'}>Trivia</button></li>\r\n        <li><button id=\"math\" name=\"nav-btn\" onClick ={props.onClick} className={(props.activeTab === 'math')?'active':'nactive'}>Math</button></li>\r\n        <li><button id=\"year\" name=\"nav-btn\" onClick ={props.onClick} className={(props.activeTab === 'year')?'active':'nactive'}>Year</button></li>\r\n        <li><button id=\"date\" name=\"nav-btn\" onClick ={props.onClick} className={(props.activeTab === 'date')?'active':'nactive'}>Date</button></li>        \r\n      </ul>      \r\n    </div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nfunction Inputs(props) {\r\n\tif(props.activeTab==='trivia') \r\n\treturn (\r\n\t\t<div className=\"form\">\r\n\t        <label>Number</label>\r\n\t        <input type=\"number\" onKeyUp ={props.enterPress} onChange={props.numberChange} value={props.number} required/>\r\n\t        <button onClick ={props.getFact} >Get fact</button>\t  \r\n\t        <button onClick ={props.getRandomFact}>Get Random fact</button>\t  \r\n      \t</div>\r\n\t   \r\n\t);\r\n\telse if(props.activeTab==='math')\r\n\t\treturn (\r\n\t\t<div className=\"form\">\r\n\t        <label>Number</label>\r\n\t        <input type=\"number\" onKeyUp ={props.enterPress} onChange={props.numberChange} value={props.number} />\r\n\t       \t<button onClick ={props.getFact} >Get fact</button>\t  \r\n\t       \t<button onClick ={props.getRandomFact} >Get Random fact</button>\t  \r\n\t  \r\n      \t</div>\r\n\t\t\t);\r\n\telse if(props.activeTab==='year')\r\n\t\treturn (\r\n\t\t<div className=\"form\">\r\n\t        <label>Year</label>\r\n\t        <input type=\"number\" onKeyUp ={props.enterPress} onChange={props.numberChange} value={props.number} />\t \r\n\t        <button onClick ={props.getFact} >Get fact</button>\t  \t         \r\n\t        <button onClick ={props.getRandomFact} >Get Random fact</button>\t  \t         \r\n      \t</div>\r\n\t\t\t);\r\n\telse if(props.activeTab==='date')\r\n\t\treturn (\r\n\t\t\t<div className=\"form\">\r\n\t        <label>Month</label>\r\n\t        <input type=\"number\" onChange={props.monthChange} value={props.month}/> \t \r\n\t        <label>Day</label>\r\n\t        <input type=\"number\" onChange={props.dayChange} value={props.day}/> \r\n\t        <button onClick ={props.getDateFact} >Get fact</button>\t  \t       \r\n\t        <button onClick ={props.getRandomFact} >Get Random fact</button>\t  \t       \r\n       \t</div>\r\n\t\t\t);\r\n}\r\n\r\n\r\n\r\nexport default Inputs;","import React from 'react';\r\n\r\nfunction Fact(props) {\r\n\treturn (\r\n\t <div className = \"fact\">\r\n      <p>\r\n        {props.fact}\r\n      </p>\r\n      </div> \r\n      );\r\n}\r\n\r\nexport default Fact;","import React, {Component} from 'react';\nimport './App.scss';\nimport Nav from './Nav';\nimport Inputs from './Inputs';\nimport Fact from './Fact';\n\n class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab  : 'trivia',\n      fact : '',\n      number: '',\n      month: '',\n      day: '',\n    }\n  }\n\n  changeTab = (e) => {\n    this.setState({activeTab: e.target.id, number: '', month: '', day: '', fact: ''});\n  }\n\n  enterPress = (e) => {\n    \n    if(e.key === 'Enter')\n      this.getFact();\n  }\n\n  getFact = () =>  {\n    if(this.state.number==='')\n      alert(\"Enter valid input\");\n    else {\n     this.setState({fact: 'Loading...'});\n     fetch(`http://numbersapi.com/${this.state.number}/${this.state.activeTab}?json`)\n      .then(response=> response.json())\n      .then(fact => {this.setState({ fact: fact.text})});\n    }\n  }\n\n  getRandomFact = () => {\n    this.setState({fact: 'Loading...'});\n      fetch(`http://numbersapi.com/random/${this.state.activeTab}?json`)\n      .then(response=> response.json())\n      .then(fact => {this.setState({ fact: fact.text})});\n  }\n\n  getDateFact = () => {\n    if(this.state.day==='' || this.state.month==='')\n      alert(\"Enter valid input\");\n    else {\n    this.setState({fact: 'Loading...'});\n    fetch(`http://numbersapi.com/${this.state.month}/${this.state.day}/${this.state.activeTab}?json`)\n      .then(response=> response.json())\n      .then(fact => {this.setState({ fact: fact.text})});\n    }\n  }\n\n  numberChange = (e) => {\n        this.setState({number: e.target.value});      \n    }\n  \n\n  monthChange = (e) => {\n        this.setState({month: e.target.value});       \n    }\n  \n\n  dayChange = (e) => {\n        this.setState({day: e.target.value});\n    }\n  \n\n  render() {\n  return (\n    <div>\n      <div className = \"header\">\n      <h1>Numbers Facts</h1>\n      </div>\n      <Nav activeTab={this.state.activeTab} \n      onClick = {this.changeTab}/>\n      <Inputs activeTab={this.state.activeTab} enterPress={this.enterPress} getFact={this.getFact} getRandomFact={this.getRandomFact} getDateFact={this.getDateFact} numberChange={this.numberChange} monthChange={this.monthChange} dayChange={this.dayChange} number={this.state.number} month={this.state.month} day={this.state.day}/>\n      <Fact fact={this.state.fact}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}